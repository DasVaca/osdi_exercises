/* No right answers are guarantee */

Q1. 
What are the two main functions of an os?
A1. 
Provide abstraction to the user/programmer (from hardware) and
managing resources.


Q2.
What is the difference between kernel mode and user mode?
Why is the difference important to an os?
A2.
A program running on kernel mode has direct access to the hardware,
on the other hand user mode programs have to request the kernel for such operations.
...


Q3.
What is multiprogramming?
A3.
Loading multiple programs so that if one is on an operation
that does not require cpu time then another programms 
could execute without having to change tapes or unload the
previous program, this was achieved partitionating the computer disk/memory 
(so that each programs has a designated space to work freely).


Q4.
What is spooling? 
Do you think that advanced pc will have spooling as standard feature in the future?
A4.
The ability to read jobs (from tapes/cards) onto the computer disk so they can 
be used as soon as another jobs ends.
I am in the future, so answering now is kinda weird.


Q5. On early computers, every byte of data read or written was directly handled
by the CPU (i.e. there was no Direct Memory Access).
What implications does this organization have for multiprogramming?
A5.
Multiprogramming could not be achieve efficently because a program requesting 
to read/write a file (wich most programs do) would constantly needs cpu time.


Q6.
Why was timesharing not widespread on 2nd-gen computers?
A6.
The risk to lose a day of work was to high, since programmers didn't have
the machine for themselves they couldn't debug the programs on runtime, 
therefore they have to wait until the results were given by the batch people.


Q7.
Which of the following instructions should be allowed only in kernel mode?
a) Disable all interrupts
b) Read the time-of-day clock
c) Set the time-of-day clock
d) Change the memory map
A7.
All of them.


Q8.
List some differences between pc os and mainframe os.
A8.


Q9. 
Give one reason why a closed-source propietary system like Windows 
should have better quality than open-source os like Linux; and viceversa.
A9.
1: Hackers will have a hard time figuring out bugs so there could be a more secure
software (better quality).
2: Since the source is open,bugs can be spotted and fixed fairly easy and fast.


Q10.
A MINIX file whose owner has UID=12 and GID=1 has mode 
rwxr-x---
Another user with UID=6 and GID=1 tries to execute the file.
What will happen?
A10.
I will execute the file because they are in the same group.


Q11. In view of the fact that the mere existence of a superuser can lead to all kinds of security problems,
why does such a concept exists?
A11. If a system lacks a superuser, then It has two options
1. all ordinary users are in fact superusers.
2. all ordinary users aren't superusers, hence cannot made certain system calls.
Is pretty clear they are both bad options, (1) an ordinary users could mess the system up by accident or an atacker
intruding on the computer could have full access to all system features; (2) this could make a system unusable because
users couldn't create inodes and therefore many any use of files. Therefore we conclude that the best options is to have
a superuser as a separate entity.


Q12. All versions of UNIX support file naming using both absolute paths and relative paths.
Would it be possible to dispose of one of these and just use the other? If so, which would you suggest keeping?
A12. Yes, absolute paths because there's no ambiguity on the file we are referring to and we can change
the root for an app if we don't want it messing up in the tree.


Q13. Why is the process table needed in a timesharing system?
Is it also needed in p.c. systems in which only one process exists, that process taking over the entire machine
until it is finished?
A13. A process table is needed because when switching for another process it needs to save the current state of the
leaving process so can be returned later, though this is multiprogramming reason, a timesharing reason is to allow
users to evenly use the available resources (the table index works as a queue), 
this makes users feel that they have the computer for they own.

Q14. What is the essential difference between a block special file and a character special file?
A14. Block special file is read-only and Character special file is write-only.


Q15. In MINIX 3 if user 2 links to a file owned by user 1, then 1 removes the file, 
What happens when user 2 tries to read the file?
A15. If user 1 removes using the unlink syscall or the delete instruction does it, then user 2 is still able
to read the file. If the file is abruptly remove (i.e. just wipe or corrupt that memory) I don't know what happens.


Q16. Are pipes an essential facility? Would major functionality be lost if they were not available?
A16. No, it can be replaced by slowest methods (like writting to files and get programs to read that file in runtime).


Q17. Modern consumer appliances such as stereos and digital cameras often have a display where commmands can be
entered and the results of entering those commands can be viewed. These devices often have a primitive os inside.
To what part of a pc software is the command processing via the stereo or camera's display similar to?
A17. The shell.


Q18. Windows does not have a fork system call, yet it is able to create new processes. 
Make an educated guess about the semantics of the system call Windows uses to create new processes.
A18. I think it should have a proccess table, to create a new process one needs to request for an index in the 
table giving the amount of memory needed for the processs. Something like 
    mkp(data, memory_size) -> process_table_index
where data is the binary to be execute and memory_size is the memory needed to run the process successfully.


Q19. Why is the chroot syscall limited to the superuser? (Hint: think about protection problems)
A19. 
